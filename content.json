{"meta":{"title":"人生当苦无妨","subtitle":"人生当苦无妨，良人当归即好；","description":null,"author":"lolilijve","url":"https://blog.lolilijve.top"},"pages":[{"title":"categories","date":"2018-12-27T15:04:39.000Z","updated":"2019-07-26T03:03:15.006Z","comments":false,"path":"categories/index.html","permalink":"https://blog.lolilijve.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-12-28T13:05:30.000Z","updated":"2019-07-26T03:03:15.006Z","comments":true,"path":"guestbook/index.html","permalink":"https://blog.lolilijve.top/guestbook/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-27T16:06:22.000Z","updated":"2019-07-26T03:03:15.006Z","comments":false,"path":"tags/index.html","permalink":"https://blog.lolilijve.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"nacos使用笔记","slug":"nacos使用笔记","date":"2019-08-06T03:14:44.650Z","updated":"2019-08-08T09:31:13.769Z","comments":true,"path":"nacos使用笔记/","link":"","permalink":"https://blog.lolilijve.top/nacos使用笔记/","excerpt":"nacos官网（快速开始） https://nacos.io/zh-cn/docs/quick-start.html","text":"nacos官网（快速开始） https://nacos.io/zh-cn/docs/quick-start.html 安装步骤 github获取最新版本 https://github.com/alibaba/nacos/releases 解压，使用 Linux/Unix/Mac启动命令(standalone代表着单机模式运行，非集群模式):12&gt; sh startup.sh -m standalone&gt; 停止命令12&gt; sh shutdown.sh&gt; 服务注册12&gt; curl -X POST 'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&amp;ip=20.18.7.10&amp;port=8080'&gt; 服务发现12&gt; curl -X GET 'http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=nacos.naming.serviceName'&gt; 发布配置12&gt; curl -X POST \"http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&amp;content=HelloWorld\"&gt; 获取配置12&gt; curl -X GET \"http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test\"&gt; web配置 打开 localhost:8848/nacos 即可 遇到问题 Cannot create PoolableConnectionFactory错误信息：123456789101112&gt; Caused by: java.lang.RuntimeException: load schema.sql error.org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Failed to create database &apos;/data/nacos/data/derby-data&apos;, see the next exception for details.)&gt; at com.alibaba.nacos.config.server.service.LocalDataSourceServiceImpl.reload(LocalDataSourceServiceImpl.java:110)&gt; at com.alibaba.nacos.config.server.service.LocalDataSourceServiceImpl.init(LocalDataSourceServiceImpl.java:94)&gt; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&gt; at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&gt; at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&gt; at java.lang.reflect.Method.invoke(Method.java:498)&gt; at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:363)&gt; at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:307)&gt; at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:136)&gt; ... 70 common frames omitted&gt; 解决方法： 删除报错信息中的’/data/nacos/data/derby-data’目录，重新启动。","categories":[{"name":"nacos","slug":"nacos","permalink":"https://blog.lolilijve.top/categories/nacos/"}],"tags":[{"name":"nacos","slug":"nacos","permalink":"https://blog.lolilijve.top/tags/nacos/"}]},{"title":"Java锁机制","slug":"Java锁机制","date":"2019-08-01T02:53:00.000Z","updated":"2019-08-08T12:08:48.378Z","comments":true,"path":"Java锁机制/","link":"","permalink":"https://blog.lolilijve.top/Java锁机制/","excerpt":"(图片来自网络)","text":"(图片来自网络) 未完待续。。。","categories":[{"name":"java","slug":"java","permalink":"https://blog.lolilijve.top/categories/java/"}],"tags":[{"name":"lock","slug":"lock","permalink":"https://blog.lolilijve.top/tags/lock/"}]},{"title":"从windows转到linux的纪念篇","slug":"从明天起-面朝大海-春暖花开","date":"2019-07-26T05:00:00.000Z","updated":"2019-07-26T10:34:26.882Z","comments":true,"path":"从明天起-面朝大海-春暖花开/","link":"","permalink":"https://blog.lolilijve.top/从明天起-面朝大海-春暖花开/","excerpt":"","text":"近日，从windows转战linux，放弃了经营了多年的windows阵地； 入手选了manjaro，终于可以说一句“arch大法好”啊； 至于manjaro的优点什么的也不再累述了； 作出这样的决定主要还是归结于一句话“万事先骑上虎背”；随着年纪越来越迟暮，对生活的冲动也越来越缺乏； 大部分人在二三十岁就死了，因为过了这个年龄，他们只是自己的影子，此后的余生则是在模仿自己中度过。日复一日，更机械，更装腔作势地重复他们有生之年的所作所为，所思所想，所爱所恨。—— 罗曼·罗兰 我只是想继续活着罢了！ 放弃破解，拥抱开源！我感觉很充实，这个feel倍儿爽。 另外，又捡起了我的blog，主要原因是windows的onenote用不了了，我只能拿blog来做笔记咯，有点小失落！ 即来之，则安之。 从明天起，做一个幸福的人喂马、劈柴，周游世界从明天起，关心粮食和蔬菜我有一所房子，面朝大海，春暖花开 从明天起，和每一个亲人通信告诉他们我的幸福那幸福的闪电告诉我的我将告诉每一个人 给每一条河每一座山取一个温暖的名字陌生人，我也为你祝福愿你有一个灿烂的前程愿你有情人终成眷属愿你在尘世获得幸福我只愿面朝大海，春暖花开 —— 海子 然后，没什么想说的了，努力做个拥抱开源的程序员吧！","categories":[{"name":"linux","slug":"linux","permalink":"https://blog.lolilijve.top/categories/linux/"}],"tags":[{"name":"manjaro","slug":"manjaro","permalink":"https://blog.lolilijve.top/tags/manjaro/"},{"name":"linux","slug":"linux","permalink":"https://blog.lolilijve.top/tags/linux/"}]},{"title":"hexo创建帖子","slug":"hello-markdown","date":"2019-02-20T09:13:00.000Z","updated":"2019-07-26T07:17:54.604Z","comments":true,"path":"hello-markdown/","link":"","permalink":"https://blog.lolilijve.top/hello-markdown/","excerpt":"如何写一篇自己的hexo帖子？","text":"如何写一篇自己的hexo帖子？ 快速上手创建一个帖子1$ hexo new \"My New Post\" More info: Writing 运行服务1$ hexo server 或 简写1$ hexo s More info: Server 生成静态文件1$ hexo generate 或 简写1$ hexo g More info: Generating 部署到远程1$ hexo deploy 或 简写1$ hexo d More info: Deployment 一般部署操作1$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 分割线 md 语法 标题 用 Markdown 书写时，只需要在文本前面加上『# 』即可创建一级标题。同理，创建二级标题、三级标题等只需要增加『# 』个数即可，Markdown 共支持六级标题。如下所示： 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果如下(为了不影响布局，此处用网上图片代替)： 引用 Markdown 标记区块引用，只需要在整个段落的第一行最前面加上 『&gt;』即可 ： 1&gt; 我的引用内容 效果如下： 我的引用内容 区块引用可以嵌套，只要根据层次加上不同数量的『&gt;』即可： 12&gt; 这是第一级引用。&gt; &gt; 这是第二级引用。 效果如下： 这是第一级引用。 这是第二级引用。 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 1234&gt; - 这是一个标题。&gt; 1. 这是第一行列表项。&gt; 2. 这是第二行列表项。&gt; `var f = function()&#123;&#125;` 效果如下： 这是一个标题。 这是第一行列表项。 这是第二行列表项。var f = function(){} 列表 列表项目标记通常放在最左边，项目标记后面要接一个字符的空格。 无序列表：使用星号、加号或是减号作为列表标记: 123456- Red- Green+ Blue+ yellow* black* white 效果如下： Red Green Blue yellow black white 有序列表：使用数字接着一个英文句点 1231. Red2. Green3. Blue 效果如下： Red Green Blue 代办列表: 表示列表是否勾选状态（注意：[ ] 前后都要有空格） 12- [ ] 不勾选- [x] 勾选 效果如下： 不勾选 勾选 代码引用 需要引用代码时，如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。如果引用的语句为多行，可以将```置于这段代码的首行和末行。（调不好了，放张图凑乎一下） 强调 在Markdown中，可以使用 * 和 _ 来表示斜体和加粗。 斜体： 12*Coding，让开发更简单*_Coding，让开发更简单_ 效果如下： Coding,让开发更简单; Coding,让开发更简单. 加粗： 12**Coding，让开发更简单**__Coding，让开发更简单__ 效果如下： Coding，让开发更简单 Coding，让开发更简单 链接 方括号显示说明，圆括号内显示网址， Markdown 会自动把它转成链接，例如： 1[百度一下](https://www.baidu.com) 效果如下： 百度一下 表格 在 Markdown 中，可以制作表格，例如： 1234First Header | Second Header | Third Header------------ | ------------- | ------------Content Cell | Content Cell | Content CellContent Cell | Content Cell | Content Cell 效果如下： First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell 也可以让表格左右对齐或居中，例如： 1234First Header | Second Header | Third Header:----------- | :-----------: | -----------:Left | Center | RightLeft | Center | Right 效果如下： First Header Second Header Third Header Left Center Right Left Center Right 图片 Markdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用. 内联图片: 123![bg](/public/img/bg.png)或![sidebar_header](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1529440322654&amp;di=86d45751742055d4ba39c9158164aa84&amp;imgtype=0&amp;src=http%3A%2F%2Fimg3.duitang.com%2Fuploads%2Fitem%2F201508%2F28%2F20150828095653_N4zGY.jpeg &quot;古风&quot;) 效果如下： 或 也就是: 一个惊叹号『!』 接着一个方括号，里面是图片的替代文字，接着一个圆括号，里面是图片的地址，最后还可以用引号包住并加上选择性的『title』文字进行悬停显示。 引用图片: 12[id]: /public/images/bg.png &quot;大风车，吱呀呀地转&quot;![][id] 『id』 是图片引用的名称. 图片引用使用链接定义的相同语法 效果如下： hexo官方文档","categories":[{"name":"hexo","slug":"hexo","permalink":"https://blog.lolilijve.top/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.lolilijve.top/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://blog.lolilijve.top/tags/blog/"},{"name":"Markdown","slug":"Markdown","permalink":"https://blog.lolilijve.top/tags/Markdown/"}]},{"title":"springboot + slf4j + logback 配置","slug":"springboot-log-config","date":"2019-02-20T09:13:00.000Z","updated":"2019-07-26T07:17:32.238Z","comments":true,"path":"springboot-log-config/","link":"","permalink":"https://blog.lolilijve.top/springboot-log-config/","excerpt":"springboot + slf4j + logback 配置，随手记一下。","text":"springboot + slf4j + logback 配置，随手记一下。 spring-boot-starter包已经依赖了logback和slf4j,所以此处不需要再添加其他依赖。如下图： idea打开jar包依赖关系图步骤如下图所示： 配置文件优先级：logback-spring.xml &gt; logback-test.xml &gt; logback.xml logback-spring.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration&gt; &lt;property name=\"LOG_HOME\" value=\"/logs/spider\"/&gt; &lt;property name=\"myAppName\" value=\"spider\"/&gt; &lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt; &lt;!-- 控制台输出 --&gt; &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt; &lt;encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"&gt; &lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- 按照每天生成日志文件 --&gt; &lt;appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt; &lt;filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\"&gt; &lt;level&gt;WARN&lt;/level&gt; &lt;/filter&gt; &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt; &lt;!--日志文件输出的文件名--&gt; &lt;FileNamePattern&gt;$&#123;LOG_HOME&#125;/log_%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt; &lt;!--日志文件保留天数--&gt; &lt;MaxHistory&gt;30&lt;/MaxHistory&gt; &lt;/rollingPolicy&gt; &lt;encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;!--日志文件最大的大小--&gt; &lt;triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"&gt; &lt;MaxFileSize&gt;10MB&lt;/MaxFileSize&gt; &lt;/triggeringPolicy&gt; &lt;/appender&gt; &lt;!-- 日志输出级别 --&gt; &lt;root level=\"WARN\"&gt; &lt;appender-ref ref=\"STDOUT\"/&gt; &lt;appender-ref ref=\"FILE\"/&gt; &lt;/root&gt; &lt;!-- 开发、测试环境 --&gt; &lt;springProfile name=\"dev,test\"&gt; &lt;logger name=\"com.spider.modules.spider.dao\" level=\"DEBUG\"/&gt; &lt;logger name=\"com.spider.modules.business.dao\" level=\"DEBUG\"/&gt; &lt;logger name=\"org.springframework.web\" level=\"INFO\"/&gt; &lt;logger name=\"org.springboot.sample\" level=\"INFO\"/&gt; &lt;logger name=\"com.spider\" level=\"INFO\"/&gt; &lt;/springProfile&gt; &lt;!-- 生产环境 --&gt; &lt;springProfile name=\"prod\"&gt; &lt;logger name=\"org.springframework.web\" level=\"ERROR\"/&gt; &lt;logger name=\"org.springboot.sample\" level=\"ERROR\"/&gt; &lt;logger name=\"com.spider\" level=\"ERROR\"/&gt; &lt;/springProfile&gt;&lt;/configuration&gt;","categories":[{"name":"log","slug":"log","permalink":"https://blog.lolilijve.top/categories/log/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"https://blog.lolilijve.top/tags/springboot/"},{"name":"slf4j","slug":"slf4j","permalink":"https://blog.lolilijve.top/tags/slf4j/"},{"name":"logback","slug":"logback","permalink":"https://blog.lolilijve.top/tags/logback/"}]},{"title":"win10中docker的安装和配置","slug":"windows10中docker的安装和使用","date":"2019-02-20T09:13:00.000Z","updated":"2019-07-26T03:03:14.996Z","comments":true,"path":"windows10中docker的安装和使用/","link":"","permalink":"https://blog.lolilijve.top/windows10中docker的安装和使用/","excerpt":"","text":"前置条件 本人使用 ，个人觉得很好用的一款Windows包管理工具；","categories":[{"name":"docker","slug":"docker","permalink":"https://blog.lolilijve.top/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.lolilijve.top/tags/docker/"},{"name":"windows","slug":"windows","permalink":"https://blog.lolilijve.top/tags/windows/"}]},{"title":"从治学三境界到如何读源码之Read The Fucking Source Code","slug":"从治学三境界到如何读源码之Read The Fucking Source Code","date":"2019-01-15T05:03:00.000Z","updated":"2019-07-26T03:03:15.000Z","comments":true,"path":"从治学三境界到如何读源码之Read The Fucking Source Code/","link":"","permalink":"https://blog.lolilijve.top/从治学三境界到如何读源码之Read The Fucking Source Code/","excerpt":"治学三境界王国维在《人间词话》中说：古今之成大事业、大学问者，必经过三种之境界： “昨夜西风凋碧树，独上高楼，望尽天涯路。” 此第一境也。 “衣带渐宽终不悔，为伊消得人憔悴。” 此第二境也。 “众里寻他千百度，蓦然回首，那人却在，灯火阑珊处。”此第三境也。","text":"治学三境界王国维在《人间词话》中说：古今之成大事业、大学问者，必经过三种之境界： “昨夜西风凋碧树，独上高楼，望尽天涯路。” 此第一境也。 “衣带渐宽终不悔，为伊消得人憔悴。” 此第二境也。 “众里寻他千百度，蓦然回首，那人却在，灯火阑珊处。”此第三境也。 境界一作为一个做学问者，首先要高瞻远瞩认清前人所走的路，也就是说，总结和学习前人的经验是做学问的起点。 境界二作为一名做学问者，应深思熟虑，就像热恋中的情人那样热切、不惜一切的追求自己的目标。 境界三没有千百度的上下求索，不会有瞬间的顿悟和理解。 做学问学问是什么？学问是研究客观事物规律而形成的系统知识。 恕我肤浅地认为，所有参杂思考的事都是做学问； 编程是做学问多数人和我一样，还在爬高楼，怕是连第一境界都说不上； 上得高楼方能望尽天涯路，楼高如斯，何以攀？ 读书 你是不是觉得现在是信息大爆炸的时代，所有的知识网络上都有，还看书干啥？ 我以前也是这样认为的，到头来积累下来的知识少的可怜，才发现，非也，非也，此非吾之道也。 网路文章看多了后发现，我抄你的，你抄我的，都是换汤不换药，有的甚至连汤都不换。 这就导致我们会花很多时间在重复的事情上；然后发现，我们一直浮在表面，知识点零零碎碎，完全不如那些看书的同学知识体系完整，理解深刻。 所以我认为，网络文章可以是解决问题的参考，而不应该是积累知识的途径。 读源码 Linus 是Linux的早期作者，一句影响深远的话是“Read The Fucking Source Code”，这句话既体现了阅读源码的重要性，也说明了阅读源码对于大牛来说也是一件令人头疼的事。 读源码这个读字可能不够贴切，读的深度是远远不够的，可能“咀嚼“，”消化“或是”解剖”会稍微好一点，但是意思是这么个意思，下文还是且用读吧； 读代码可以学习到很多编程的方法，看好的源码，对于提高自己的编程水平，比自己写源码的帮助更大。可以从别人写的好的源代码中间学习到更多的编程方法和技巧。 在阅读大量源代码的时候，能够提高自己对大的软件的把握能力，快速了解脉络，熟悉细节，不仅仅是编程技巧，还能在程序的架构，设计方面提高自己的能力。 读源码要带着问题去读，“为什么他要这么写？”，“这么写的好处是什么？”，“如果是我，我会怎么写？”，“两者的区别是什么？”，“怎么拓展能更适用于我所写过的代码？”。。。 动手实践 书读百遍，其意自见；你不会真的想读一百遍吧？ 纸上得来终觉浅，绝知此事要躬行。（电脑上得来的也一样：）） 修修改改，拆解再组装，只有参杂了自己思想的东西才能变成自己的。 而支撑着你这么做的必须是兴趣，否则人生苦短，这般何必？ 读源码也是做学问既然是做学问，那也是三个境界。 读源码三境界昨夜西风凋碧树，独上高楼，望尽天涯路想要吃透源码，化为己用，首先得登高望远，明确目标与方向，了解源码的概貌。 阅读源码之前，需要有一定的技术储备比如设计模式，在很多Java源码中几乎就是标配，尤其是这几个：模板方法，单例，观察者，工厂方法，代理，策略，装饰者。 再比如阅读Spring源码，肯定得先了解IoC是怎么回事，AOP的实现方式，CGLib，Java动态代理等，自己动手，写点相关的代码，把这些知识点掌握了。 必须得会使用这个框架/类库， 最好是精通各种各样的用法魔鬼都在细节中，如果有些用法根本不知道，可能你能看明白代码是什么意思，但是不知道它为什么这些写。 找资料，了解这整体设计都有哪些模块？ 模块之间是怎么关联的？ 可能一下子理解不了，但是要建立一个整体的概念，就像一个地图，防止你迷航。 在读源码的时候可以时不时看看自己在什么地方。 整体通读代码，不需要太细致整体通读，把源码各模块，功能和你的了解对应起来，确定几处你较关心的功能，节点，实践分析时着重处理。 搭建系统，把源代码跑起来相信我，Debug是非常非常重要的手段， 你想通过只看而不运行就把系统搞清楚，那是根本不可能的！ 衣带渐宽终不悔，为伊消得人憔悴。根据你对系统的理解，设计几个主要的测试案例运行系统，慢慢地debug ，一步步地走，这是个死功夫，没有办法绕过。 ​ Debug一遍肯定是不行的，需要Debug很多遍。 第一遍尽可能抛弃细节，抓住主要流程， 比如有些看起来不重要的方法就不进去看了。 抓住了主要流程….再去看那些细节。 一个非常重要的工作就是记笔记，画出系统的类图（不要依靠IDE给你生成的）， 记录下主要的函数调用， 方便后续查看。 ​ 文档工作极为重要 因为代码太复杂，人的大脑容量也有限，记不住所有的细节。 文档可以帮助你记住关键点， 到时候可以回想起来，迅速地接着往下看。 要不然，你今天看的，可能到明天就忘个差不多了。再从头看一遍，岂不又走了冤枉路。 笔记格式不重要，方便自己看懂就行。 主要的测试案例搞明白了，丰富测试案例，考虑一些分支流程继续Debug…… 总之，静态地看代码 + 动态地debug (从业务的角度)， 就会慢慢揭开The Fucking Source Code神秘的面纱。 这一步会非常非常地花费时间，但是你做完了，对系统的理解绝对有质的飞跃。 众里寻他千百度，蓦然回首，那人却在灯火阑珊处。没有千百度的上下求索，不会有瞬间的顿悟和理解，衷心祝愿阅读源码的同学们都能达到这一境界。 最后一点，也是最关键的一点： 要坚持下去。 我不是一个聪明人， 但是笨人自有笨办法：什么事都架不住不断的重复，一遍看不明白，再来第二遍， 两遍搞不明白，再来第三遍……所谓书读百遍，其意自见。嘿嘿… 是什么让我们Read The Fucking Source Code? 《陈寅恪和傅斯年》中有这样一句形容傅斯年的话：凡事必先骑上虎背。 是什么让我们在编程这条不归路一路走到黑？ 是兴趣，是好奇，是爱；如果都不是，尽早放弃吧！ 如何不放弃Read The Fucking Source Code 要有决心，要有一个成为高级工程师的决心。这一点谁也帮不了你，完全靠自己。想象一下：不用多久，我就会升职加薪、当上总经理、出任CEO、迎娶白富美、走上人生巅峰，想想还有点小激动。 循序渐进，任何事情需要一个过程，由易到难。 制定计划，给自己制定一个计划，一个自己想完成并且能完成的计划。如几天之内看完这个项目，这个星期要看完多少。 给你的编程和学习添加点小乐趣能让你更容易地坚持下去，如泡一壶清茶，播放几首轻音乐。最后剩下的就是日复一日的坚持。","categories":[{"name":"Source Code","slug":"Source-Code","permalink":"https://blog.lolilijve.top/categories/Source-Code/"}],"tags":[{"name":"Source Code","slug":"Source-Code","permalink":"https://blog.lolilijve.top/tags/Source-Code/"}]},{"title":"windows系统包管理工具scoop安装使用","slug":"windows系统包管理工具scoop安装使用","date":"2018-12-27T09:17:59.000Z","updated":"2019-07-26T03:03:14.996Z","comments":true,"path":"windows系统包管理工具scoop安装使用/","link":"","permalink":"https://blog.lolilijve.top/windows系统包管理工具scoop安装使用/","excerpt":"参考官方github说明​ https://github.com/lukesampson/scoop/wiki 步骤 安装scoop 设置应用安装路径 安装常用应用","text":"参考官方github说明​ https://github.com/lukesampson/scoop/wiki 步骤 安装scoop 设置应用安装路径 安装常用应用 准备 版本大于等于3的powershell 12&gt; $psversiontable.psversion.major&gt; 确保您已允许PowerShell执行本地脚本 12&gt; set-executionpolicy remotesigned -scope currentuser&gt; 安装scoop将Scoop安装到自定义目录假设目标目录是D:\\Applications\\Scoop,在PowerShell命令控制台中运行： 123[environment]::setEnvironmentVariable('SCOOP','D:\\Applications\\Scoop','User')$env:SCOOP='D:\\Applications\\Scoop'iex (new-object net.webclient).downloadstring('https://get.scoop.sh') 将全局应用安装到自定义目录假设目标目录是D:\\Applications\\Scoop\\globalApps,在PowerShell命令控制台中运行： 12[environment]::setEnvironmentVariable('SCOOP_GLOBAL','D:\\Applications\\Scoop\\globalApps','Machine')$env:SCOOP_GLOBAL='D:\\Applications\\Scoop\\globalApps' 安装应用以我常用应用为例(可作为脚本文件,后缀ps1) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950###安装scoop并自定义安装路径[environment]::setEnvironmentVariable('SCOOP','D:\\Applications\\Scoop','User')$env:SCOOP='D:\\Applications\\Scoop'iex (new-object net.webclient).downloadstring('https://get.scoop.sh')[environment]::setEnvironmentVariable('SCOOP_GLOBAL','D:\\Applications\\Scoop\\globalApps','Machine')$env:SCOOP_GLOBAL='D:\\Applications\\Scoop\\globalApps'###添加桶scoop bucket add extras;scoop bucket add Java;scoop bucket add versions;scoop bucket add Ash258;###安装APP#下载scoop install aria2;#解压scoop install bandizip;#浏览器scoop install chrome;#cmdscoop install Cmder;#文件检索scoop install everything;#git,程序员必备scoop install git;#包管理scoop install maven;#远程终端scoop install MobaXterm;#播放器scoop install potplayer;#redisscoop install redis;#桌面控制scoop install teamviewer;#markdown编写scoop install typora;#编辑器scoop install vscode;#效率启动神器scoop install WOX;#离线文档浏览器scoop install zeal;###安装全局应用scoop install mysql56 -g;scoop install nodejs -g;scoop install oraclejdk8 -g;scoop install python36 -g; 部分应用配置修改everything(这样可将everything集成到WOX中): MySQL注册MySQL服务,(因为scoop是低污染的,所以要自己做): 1mysqld -install MySQL --defaults-file=\"D:\\Applications\\GlobalApps\\apps\\mysql56\\current\\my-default.ini\" 顺便启动服务(此时可以打开wox,输入services打开服务) 剩下的好像没什么了,随意吧!","categories":[{"name":"scoop","slug":"scoop","permalink":"https://blog.lolilijve.top/categories/scoop/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://blog.lolilijve.top/tags/windows/"},{"name":"scoop","slug":"scoop","permalink":"https://blog.lolilijve.top/tags/scoop/"}]},{"title":"通过Dockerfile创建支持ssh功能的centos镜像","slug":"通过Dockerfile创建支持ssh功能的centos镜像","date":"2018-12-26T08:16:16.000Z","updated":"2019-07-26T03:03:15.003Z","comments":true,"path":"通过Dockerfile创建支持ssh功能的centos镜像/","link":"","permalink":"https://blog.lolilijve.top/通过Dockerfile创建支持ssh功能的centos镜像/","excerpt":"通过Dockerfile创建支持ssh功能的centos镜像过程包括： 获取centos镜像 编辑Dockerfile并创建支持ssh的centos镜像 运行镜像","text":"通过Dockerfile创建支持ssh功能的centos镜像过程包括： 获取centos镜像 编辑Dockerfile并创建支持ssh的centos镜像 运行镜像 获取centos镜像1docker pull centos 然后查看镜像： 1docker images 编辑Dockerfile并创建支持ssh的centos镜像在当前目录编辑Dockerfile（不存在文件就自动创建）： 1vim Dockerfile 我的Dockerfile： 123456789101112131415FROM centosMAINTAINER lolilijve \"lolilijve@gmail.com\"#安装sshRUN yum install -y openssh openssh-server openssh-clients#设置公钥，用户，密码等RUN mkdir -p /var/run/sshdRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_keyRUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_keyRUN /bin/echo 'root:123456' |chpasswdRUN useradd userRUN /bin/echo 'user:123456' |chpasswdRUN /bin/echo -e \"LANG=\\\"en_US.UTF-8\\\"\" &gt; /etc/default/local#暴露端口EXPOSE 22CMD /usr/sbin/sshd -D 通过Dockerfile创建镜像： 1docker build -f 'Dockerfile' -t lolilijve/centos:ssh . 运行镜像1docker run -d -p 22 lolilijve/centos:ssh 通过ssh联入，（此处端口在上一条执行结果中，用户名在Dockerfile有设置）： 1ssh user@127.0.0.1 -p 32768 此时，已完成通过Dockerfile创建支持ssh功能的centos镜像及镜像运行。 那么接下来， 实现通过公钥的免密码登入功能在宿主机生成密钥1ssh-keygen 把公钥发到容器中的系统里1ssh-copy-id -i ~/.ssh/id_rsa.pub root@0.0.0.0 -p 32771 免密码登入结果测试1ssh root@0.0.0.0 -p 32771 完成！","categories":[{"name":"docker","slug":"docker","permalink":"https://blog.lolilijve.top/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.lolilijve.top/tags/docker/"},{"name":"centos","slug":"centos","permalink":"https://blog.lolilijve.top/tags/centos/"}]},{"title":"springboot项目docker打包","slug":"springboot-docker-package","date":"2018-08-07T00:52:59.000Z","updated":"2019-07-26T03:03:14.983Z","comments":true,"path":"springboot-docker-package/","link":"","permalink":"https://blog.lolilijve.top/springboot-docker-package/","excerpt":"贫道自知法力低微，对docker更是一知半解，但是随便写点总比不写强！","text":"贫道自知法力低微，对docker更是一知半解，但是随便写点总比不写强！ 前置条件： ide：Intellij IDEA 安装激活可参照此文 1.安装idea docker插件，如图所示： 2.安装docker（Windows版）： 点击获取docker 安装过程不累述，按照提示来即可；安装完启动可看到如下： 右键settings，设置： 内存不足可设置： 3.idea内docker打包： 建立文件Dockerfile 1234567FROM java:8EXPOSE 8080VOLUME /tmpADD yourProjectName.jar /app.jarRUN bash -c &apos;touch /app.jar&apos;ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;] 在pom.xml添加plugin 123456789101112131415161718192021222324&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;configuration&gt; &lt;!-- 路径为：私有仓库地址/你想要的镜像路径 --&gt; &lt;imageName&gt;lolilijve/spider-docker&lt;/imageName&gt; &lt;!-- 指定 Dockerfile 路径--&gt; &lt;dockerDirectory&gt;$&#123;project.basedir&#125;&lt;/dockerDirectory&gt; &lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置，也可以写到 Docokerfile 中 --&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt; &lt;!-- 运行命令 mvn clean package docker:build 打包并生成docker镜像 --&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 设置maven命令： 右键执行，结果如下： 4.push镜像到DockerHub上 设置maven的全局settings.xml文件： 12345678910&lt;servers&gt; &lt;server&gt; &lt;id&gt;docker-registry&lt;/id&gt; &lt;username&gt;你的DockerHub用户名&lt;/username&gt; &lt;password&gt;你的DockerHub密码&lt;/password&gt; &lt;configuration&gt; &lt;email&gt;你的DockerHub邮箱&lt;/email&gt; &lt;/configuration&gt; &lt;/server&gt;&lt;/servers&gt; 在DockerHub上创建仓库： 点击前往 pom.xml修改如下： 1234567891011121314151617181920212223242526&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;configuration&gt; &lt;!-- 路径为：私有仓库地址/你想要的镜像路径 --&gt; &lt;imageName&gt;lolilijve/spider-docker&lt;/imageName&gt; &lt;!-- 指定 Dockerfile 路径--&gt; &lt;dockerDirectory&gt;$&#123;project.basedir&#125;&lt;/dockerDirectory&gt; &lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置，也可以写到 Docokerfile 中 --&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;!-- 与maven配置文件settings.xml中一致 --&gt; &lt;serverId&gt;docker-registry&lt;/serverId&gt; &lt;/configuration&gt; &lt;!-- 运行命令 mvn clean package docker:build 打包并生成docker镜像 --&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 命令配置如下： 右键执行即可,感觉挺久的。。。","categories":[{"name":"docker","slug":"docker","permalink":"https://blog.lolilijve.top/categories/docker/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"https://blog.lolilijve.top/tags/springboot/"},{"name":"docker","slug":"docker","permalink":"https://blog.lolilijve.top/tags/docker/"}]},{"title":"idea的安装和激活","slug":"idea-install-activate","date":"2018-08-01T14:54:56.000Z","updated":"2019-07-26T03:03:14.983Z","comments":true,"path":"idea-install-activate/","link":"","permalink":"https://blog.lolilijve.top/idea-install-activate/","excerpt":"如何激活IDEA，穷到吃土的我实乃无奈之举！","text":"如何激活IDEA，穷到吃土的我实乃无奈之举！ 去官网下载并安装 idea，点击此处跳转 下载JetbrainsCrack-2.10，放入IntelliJ_IDEA的bin目录（其实放哪都可以） 链接：https://pan.baidu.com/s/1arlX88Shc4LLbtpsFcNnWg 密码：i0kf 修改idea64.exe.vmoptions文件（位于bin目录下，如果您使用的是idea.exe请修改idea.exe.vmoptions，反正两个都改肯定没错），在文件最后添加一行： 1-javaagent:./JetbrainsCrack-2.10-release-enc.jar 重启idea，help-&gt;register-&gt;activation code，输入以下代码： 1234567891011121314151617181920212223242526&#123;\"licenseId\":\"4335\",\"licenseeName\":\"YuJia\",\"assigneeName\":\"\",\"assigneeEmail\":\"\",\"licenseRestriction\":\"Unlimited license till end of the century.\",\"checkConcurrentUse\":false,\"products\":[&#123;\"code\":\"II\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"DM\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"AC\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"RS0\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"WS\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"DPN\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"RC\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"PS\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"DC\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"RM\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"CL\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"PC\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"DB\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"GO\",\"paidUpTo\":\"2099-12-31\"&#125;,&#123;\"code\":\"RD\",\"paidUpTo\":\"2099-12-31\"&#125;],\"hash\":\"2911276/0\",\"gracePeriodDays\":7,\"autoProlongated\":false&#125; 上述中licenseeName为显示的授权对象，可随意修改（基本上都可以随意修改，看着办吧）。激活后显示如下： 然后，能用到2099年呢，反正我肯定活不了这么久，否则肯定就是程序员当得不称职。 最后，还是要说一句：此破解方法仅供学习使用，如果资金条件允许，请支持正版。（反正我的资金条件从来没允许过）","categories":[{"name":"ide","slug":"ide","permalink":"https://blog.lolilijve.top/categories/ide/"}],"tags":[{"name":"idea","slug":"idea","permalink":"https://blog.lolilijve.top/tags/idea/"},{"name":"install","slug":"install","permalink":"https://blog.lolilijve.top/tags/install/"}]},{"title":"chrome拓展程序推荐","slug":"chrome-expansion-procedure","date":"2018-07-27T09:17:59.000Z","updated":"2019-07-26T03:03:14.983Z","comments":true,"path":"chrome-expansion-procedure/","link":"","permalink":"https://blog.lolilijve.top/chrome-expansion-procedure/","excerpt":"介绍几个贫道常用的chrome拓展程序！","text":"介绍几个贫道常用的chrome拓展程序！ 1.谷歌上网助手 说明： 专门为科研、外贸、跨境电商、海淘人员、开发人员服务的上网加速工具，chrome内核浏览器专用!可以解决chrome扩展无法自动更新的问题，同时可&gt;以访问谷歌google搜索，gmail邮箱，google+等谷歌产品 网址： http://googlehelper.net/ 2.SetupVPN 说明： VPN，它免费且易于使用。（若以下网址无法访问，可先安装谷歌上网助手，见上方） 网址： https://chrome.google.com/webstore/detail/setupvpn-lifetime-free-vp/oofgbpoabipfcfjapgnbbjjaenockbdp 3.Infinity新标签页(Pro) 说明： 可能是Chrome浏览器上最好用的新标签页，遇见就不再错过 网址： https://chrome.google.com/webstore/detail/infinity-new-tab-pro/nnnkddnnlpamobajfibfdgfnbcnkgngh 4.Restlet Client - REST API Testing 说明： API测试工具 网址： https://chrome.google.com/webstore/detail/restlet-client-rest-api-t/aejoelaoggembcahagimdiliamlcdmfm 5.OneTab 说明： 节省高达95％的内存，并减轻标签页混乱现象。当您发现自己有太多的标签页时，单击OneTab图标，将所有标签页转换成一个列表。当您需要再次访问这些标签页时，可以单独或全部恢复它们。当您的标签页位于OneTab列表时，您将节省高达95％的内存，因为你将减少Google Chrome浏览器中打开的标签页的数量。 网址： https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall 6.Click&amp;Clean 说明： 当浏览器关闭时，这款应用程序删除你的浏览历史,防止他人跟踪你的网上活动。 网址： https://chrome.google.com/webstore/detail/clickclean/ghgabhipcejejjmhhchfonmamedcbeod 7.EditThisCookie 说明： EditThisCookie是一个cookie管理器。您可以添加，删除，编辑，搜索，锁定和屏蔽cookies！ 网址： https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg 8.AdBlock 说明： 拦截互联网上的广告。 网址： https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom","categories":[{"name":"chrome","slug":"chrome","permalink":"https://blog.lolilijve.top/categories/chrome/"}],"tags":[{"name":"chrome","slug":"chrome","permalink":"https://blog.lolilijve.top/tags/chrome/"}]}]}